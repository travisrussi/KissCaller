<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SocketIOClient</name>
    </assembly>
    <members>
        <member name="T:SocketIOClient.Messages.Message">
            <summary>
            All Socket.IO messages have to be encoded before they're sent, and decoded when they're received.
            They all have the format of: [message type] ':' [message id ('+')] ':' [message endpoint] (':' [message data])
            </summary>
        </member>
        <member name="P:SocketIOClient.Messages.Message.MessageType">
            <summary>
            The message type represents a single digit integer [0-8].
            </summary>
        </member>
        <member name="P:SocketIOClient.Messages.Message.AckId">
            <summary>
            The message id is an incremental integer, required for ACKs (can be ommitted). 
            If the message id is followed by a +, the ACK is not handled by socket.io, but by the user instead.
            </summary>
        </member>
        <member name="P:SocketIOClient.Messages.Message.Endpoint">
            <summary>
            Socket.IO has built-in support for multiple channels of communication (which we call "multiple sockets"). 
            Each socket is identified by an endpoint (can be omitted).
            </summary>
        </member>
        <member name="P:SocketIOClient.Messages.Message.MessageText">
            <summary>
            String value of the message
            </summary>
        </member>
        <member name="P:SocketIOClient.Messages.Message.Event">
            <summary>
            String value of the Event
            </summary>
        </member>
        <member name="P:SocketIOClient.Messages.Message.Encoded">
            <summary>
            <para>Messages have to be encoded before they're sent. The structure of a message is as follows:</para>
            <para>[message type] ':' [message id ('+')] ':' [message endpoint] (':' [message data])</para>
            <para>All message payloads are sent as strings</para>
            </summary>
        </member>
        <member name="P:SocketIOClient.SocketIOHandshake.HeartbeatInterval">
            <summary>
            The HearbeatInterval will be approxamately 20% faster than the Socket.IO service indicated was required
            </summary>
        </member>
        <member name="M:SocketIOClient.Messages.ErrorMessage.Deserialize(System.String)">
            <summary>
            
            </summary>
            <param name="rawMesage">'7::' [endpoint] ':' [reason] '+' [advice]</param>
            <returns>ErrorMessage</returns>
        </member>
        <member name="M:SocketIOClient.Eventing.RegistrationManager.InvokeOnEvent(System.String,SocketIOClient.Messages.IMessage)">
            <summary>
            If eventName is found, Executes Action<typeparamref name="T"/> asynchronously
            </summary>
            <param name="eventName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:SocketIOClient.Client" -->
        <member name="T:SocketIOClient.IClient">
            <summary>
            C# Socket.IO client interface
            </summary>
        </member>
        <member name="F:SocketIOClient.Client.LastErrorMessage">
            <summary>
            Value of the last error message text  
            </summary>
        </member>
        <member name="M:SocketIOClient.Client.Connect">
            <summary>
            Initiate the connection with Socket.IO service
            </summary>
        </member>
        <member name="M:SocketIOClient.Client.On(System.String,System.Action{SocketIOClient.Messages.IMessage})">
            <summary>
            <para>Asynchronously calls action delegate on event message</para>
            <para>Mimicks the Socket.IO client 'socket.on('name',function(data){});' pattern</para>
            <para>Reserved socket.io event names available: connect, disconnect, open, close, error, retry, reconnect  </para>
            </summary>
            <param name="eventName"></param>
            <param name="action"></param>
            <example>
            client.On("testme", (data) =>
               {
                   Debug.WriteLine(data.ToJson());
               });
            </example>
        </member>
        <member name="M:SocketIOClient.Client.Emit(System.String,System.Object,System.Action{System.Object})">
            <summary>
            <para>Mimicks Socket.IO client 'socket.emit('name',payload);' pattern</para>
            <para>Do not use the reserved socket.io event names: connect, disconnect, open, close, error, retry, reconnect</para>
            </summary>
            <param name="eventName"></param>
            <param name="payload"></param>
            <remarks>ArgumentOutOfRangeException will be thrown on reserved event names</remarks>
        </member>
        <member name="M:SocketIOClient.Client.Send(SocketIOClient.Messages.IMessage)">
            <summary>
            Queue outbound message
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:SocketIOClient.Client.OnMessageEvent(SocketIOClient.Messages.IMessage)">
            <summary>
            if a registerd event name is found, don't raise the more generic Message event
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:SocketIOClient.Client.wsClient_Closed(System.Object,System.EventArgs)">
            <summary>
            websocket has closed unexpectedly - retry connection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SocketIOClient.Client.requestHandshake(System.Uri)">
            <summary>
            <para>Client performs an initial HTTP POST to obtain a SessionId (sid) assigned to a client, followed
             by the heartbeat timeout, connection closing timeout, and the list of supported transports.</para>
            <para>The tansport and sid are required as part of the ws: transport connection</para>
            </summary>
            <param name="uri">http://localhost:3000</param>
            <returns>Handshake object with sid value</returns>
            <example>DownloadString: 13052140081337757257:15:25:websocket,htmlfile,xhr-polling,jsonp-polling</example>
        </member>
        <member name="E:SocketIOClient.Client.Opened">
            <summary>
            Opened event comes from the underlying websocket client connection being opened.  This is not the same as socket.io returning the 'connect' event
            </summary>
        </member>
        <member name="E:SocketIOClient.Client.SocketConnectionClosed">
            <summary>
            <para>The underlying websocket connection has closed (unexpectedly)</para>
            <para>The Socket.IO service may have closed the connection due to a heartbeat timeout, or the connection was just broken</para>
            <para>Call the client.Connect() method to re-establish the connection</para>
            </summary>
        </member>
        <member name="P:SocketIOClient.Client.HandShake">
            <summary>
            Represents the initial handshake parameters received from the socket.io service (SID, HeartbeatTimeout etc)
            </summary>
        </member>
        <member name="P:SocketIOClient.Client.IsConnected">
            <summary>
            Returns boolean of ReadyState == WebSocketState.Open
            </summary>
        </member>
        <member name="P:SocketIOClient.Client.ReadyState">
            <summary>
            Connection state of websocket client: None, Connecting, Open, Closing, Closed
            </summary>
        </member>
    </members>
</doc>
